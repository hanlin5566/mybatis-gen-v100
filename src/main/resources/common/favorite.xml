<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
	<!-- 读取的properties文件路径 -->
	<properties resource="common_config.properties" />
	<!-- 定义Id与运行环境 -->
    <context id="centerTables" targetRuntime="MyBatis3">
    	<property name="javaFileEncoding" value="UTF-8"/>
    	<!-- java格式化 -->
        <property name="javaFormatter" value="util.MyFormatter"/>
        <!-- RowBoundsPlugin是MyBatis Generator中自带的一个分页插件 -->
        <plugin type="org.mybatis.generator.plugins.RowBoundsPlugin" />
        <!-- false时打开注释，true时关闭注释 -->
        <commentGenerator type="com.hit.mybatis.generator.MyCommentGenerator">

        </commentGenerator>
        <!-- 从properties中读取数据库连接 -->
        <jdbcConnection driverClass="com.mysql.jdbc.Driver"
            connectionURL="${connectionURL}" userId="${userId}" password="${password}">
<property name="useInformationSchema" value="true"></property></jdbcConnection>
		<!-- 控制是否强制DECIMAL和NUMERIC类型的字段转换为Java类型的java.math.BigDecimal -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false" />
        </javaTypeResolver>
		<!-- 
			生成POJO
			targetPackage：生成实体类存放的包名
			targetProject：从properties中读取指定目标项目路径，可以是绝对路径或相对路径（如 targetProject="src/main/java"）
			enableSubPackages：如果true，会根据catalog和schema来生成子包。如果false就会直接用targetPackage属性。
			trimStrings:是否对数据库查询结果进行trim操作
			rootClass：设置所有实体类的父类
		 -->
        <javaModelGenerator targetPackage="${entityPackage}"
            targetProject="${targetFloder}src/main/java">
            <property name="enableSubPackages" value="false" />
            <property name="trimStrings" value="true" />
            <property name="rootClass" value="com.hit.base.core.BaseEntity"/>
        </javaModelGenerator>
		<!-- 
			生成 Mapper 接口类
			
			type:基于MyBatis3配置
				ANNOTATEDMAPPER:基于注解的Mapper接口，不会有对应的XML映射文件
				XMLMAPPER:所有的方法都在XML中，接口调用依赖XML文件。
			targetPackage：生成实体类存放的包名
			targetProject：从properties中读取指定目标项目路径，可以是绝对路径或相对路径（如 targetProject="src/main/java"）
			enableSubPackages：如果true，会根据catalog和schema来生成子包。如果false就会直接用targetPackage属性。
		 -->
        <javaClientGenerator type="ANNOTATEDMAPPER" targetPackage="${mapperPackage}"
            targetProject="${targetFloder}src/main/java">
            <property name="enableSubPackages" value="false" />
        </javaClientGenerator>
        <!-- 
        	需生成的表
        	schema:数据库的schema,可以使用SQL通配符匹配。如果设置了该值，生成SQL的表名会变成如schema.tableName的形式。
        	tableName:需要生成的表名
        	domainObjectName:生成对象的基本名称。应该为TableNameEntity
        	ignoreQualifiersAtRuntime:生成的SQL中的表名将不会包含schema和catalog前缀。
        	
        	columnOverride：重写列，通常需要将字典字段进行重写为枚举类型，如status、type等字段
        		column:需要重写的列名。
        		javaType：此列生成的java类型。
         -->
		<table schema="common" tableName="favorite" domainObjectName="FavoriteEntity">
        	<property name="ignoreQualifiersAtRuntime" value="false"/>
        	<columnOverride column="ext_type" javaType="com.hit.common.enums.FavoriteExtType" />
        	<columnOverride column="status" javaType="com.hit.base.enums.Status" />
        </table>
	</context>
    
</generatorConfiguration>